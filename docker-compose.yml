# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)

version: "3.7"

# Define services
services:
  # App backend service
  springserver:
    # Configuration for building the docker image for the backend service
    build:
      context: springboot-backend # Use an image built from the specified dockerfile in the `polling-app-server` directory.
      dockerfile: Dockerfile
    ports:
      - "8081:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    # depends_on:
    #   - db # This service depends on mysql. Start that first.
    # environment: # Pass environment variables to the service
    #   SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
    #   SPRING_DATASOURCE_USERNAME: root
    #   SPRING_DATASOURCE_PASSWORD: c0nygre
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service
  react-client:
    build:
      context: react-frontend # Use an image built from the specified dockerfile in the `polling-app-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8081/api
    ports:
      - "9091:80" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - springserver
    networks:
      - frontend

  # Database Service (Mysql)
  # db:
  #   image: mysql:5.7
  #   ports:
  #     - "3306:3306"
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_HOST: localhost
  #     MYSQL_DATABASE: employee_management_system
  #     MYSQL_USER: root
  #     MYSQL_PASSWORD: c0nygre
  #     MYSQL_ROOT_PASSWORD: c0nygre
  #   volumes:
  #     - db-data:/var/lib/mysql
  #   networks:
  #     - backend

# # Volumes
# volumes:
#   db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
